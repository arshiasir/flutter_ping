name: Build Flutter App

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false  # Continue other jobs even if one fails
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.1'

      - name: Install dependencies
        run: flutter pub get

      - name: Build app
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
            flutter build linux --release
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            flutter build macos --release
          else
            flutter build windows --release
          fi

      # Package per-OS native installer
      - name: Package Windows .exe installer
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install nsis -y
          New-Item -ItemType Directory -Force -Path installers | Out-Null
          $releaseDir = "build/windows/x64/runner/Release"
          if (!(Test-Path $releaseDir)) { $releaseDir = "build/windows/runner/Release" }
          if (!(Test-Path "$releaseDir/flutter_ping.exe")) { throw "flutter_ping.exe not found in $releaseDir" }

          # Prepare payload directory for NSIS to include
          New-Item -ItemType Directory -Force -Path payload_win | Out-Null
          Copy-Item -Recurse -Force "$releaseDir/*" "payload_win/"

          $nsis = @'
          !define APPNAME "Flutter Ping"
          !define COMPANYNAME "Your Company"
          !define VERSIONMAJOR 1
          !define VERSIONMINOR 0
          !define VERSIONBUILD 0

          RequestExecutionLevel admin
          InstallDir "$PROGRAMFILES\${APPNAME}"

          !include "MUI2.nsh"

          Name "${APPNAME}"
          OutFile "flutter-ping-windows-installer.exe"

          !define MUI_ABORTWARNING

          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH

          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES

          !insertmacro MUI_LANGUAGE "English"

          Section "MainApplication" SEC_ID
            SetOutPath "$INSTDIR"
            File /r "payload_win\\*.*"
            WriteUninstaller "$INSTDIR\\uninstall.exe"
            CreateDirectory "$SMPROGRAMS\\${APPNAME}"
            CreateShortCut "$SMPROGRAMS\\${APPNAME}\\${APPNAME}.lnk" "$INSTDIR\\flutter_ping.exe"
            CreateShortCut "$SMPROGRAMS\\${APPNAME}\\Uninstall.lnk" "$INSTDIR\\uninstall.exe"
          SectionEnd

          Section "Uninstall"
            Delete "$INSTDIR\\uninstall.exe"
            RMDir /r "$INSTDIR"
            Delete "$SMPROGRAMS\\${APPNAME}\\${APPNAME}.lnk"
            Delete "$SMPROGRAMS\\${APPNAME}\\Uninstall.lnk"
            RMDir "$SMPROGRAMS\\${APPNAME}"
          SectionEnd
          '@
          Set-Content -Path installer.nsi -Value $nsis -NoNewline
          & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi | Write-Output
          Move-Item -Path flutter-ping-windows-installer.exe -Destination installers/ -Force

      - name: Upload Windows installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installers/flutter-ping-windows-installer.exe

      - name: Package Linux .deb installer
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y dpkg-dev fakeroot
          VERSION="${GITHUB_REF_NAME#v}"
          [[ -z "$VERSION" ]] && VERSION="1.0.0"
          APPNAME="flutter-ping"
          PKGROOT="pkg_${APPNAME}_${VERSION}_amd64"
          mkdir -p "$PKGROOT/DEBIAN"
          mkdir -p "$PKGROOT/opt/$APPNAME"
          mkdir -p "$PKGROOT/usr/bin"
          mkdir -p "$PKGROOT/usr/share/applications"
          
          BUNDLE_DIR="build/linux/x64/release/bundle"
          cp -R "$BUNDLE_DIR/"* "$PKGROOT/opt/$APPNAME/"

          cat > "$PKGROOT/usr/bin/$APPNAME" << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          APPDIR="/opt/flutter-ping"
          cd "$APPDIR"
          exec "./flutter_ping" "$@"
          EOF
          chmod +x "$PKGROOT/usr/bin/$APPNAME"

          cat > "$PKGROOT/DEBIAN/control" << EOF
          Package: $APPNAME
          Version: $VERSION
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libc6
          Maintainer: Your Name <you@example.com>
          Description: Flutter Ping - network utility
           Flutter Ping is a simple network utility built with Flutter.
          EOF

          cat > "$PKGROOT/usr/share/applications/$APPNAME.desktop" << EOF
          [Desktop Entry]
          Name=Flutter Ping
          Comment=Network utility
          Exec=$APPNAME
          Terminal=false
          Type=Application
          Categories=Network;Utility;
          EOF

          fakeroot dpkg-deb --build "$PKGROOT"
          mkdir -p installers
          mv "${PKGROOT}.deb" installers/${APPNAME}_${VERSION}_amd64.deb

      - name: Upload Linux installer
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: installers/*.deb

      - name: Package macOS .dmg installer
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          APP_PATH=$(ls build/macos/Build/Products/Release/*.app | head -n 1)
          if [[ -z "$APP_PATH" ]]; then echo "No .app found"; exit 1; fi
          mkdir -p installers
          hdiutil create installers/flutter-ping-macos.dmg -volname "Flutter Ping" -srcfolder "$APP_PATH" -ov -format UDZO

      - name: Upload macOS installer
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: installers/flutter-ping-macos.dmg

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download installers
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Show downloaded files
        run: |
          ls -R dist | cat
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/windows-installer/*
            dist/linux-installer/*
            dist/macos-installer/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
